"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[5329],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,f=u["".concat(c,".").concat(m)]||u[m]||s[m]||i;return t?a.createElement(f,o(o({ref:n},d),{},{components:t})):a.createElement(f,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:1},o="Cosmos SDK Dependency Injection `depinject` Module",p={unversionedId:"building-apps/depinject",id:"building-apps/depinject",title:"Cosmos SDK Dependency Injection `depinject` Module",description:"Overview",source:"@site/docs/building-apps/01-depinject.md",sourceDirName:"building-apps",slug:"/building-apps/depinject",permalink:"/main/building-apps/depinject",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Overview of `app.go` and how to wire it up",permalink:"/main/building-apps/app-go"},next:{title:"Setting up the keyring",permalink:"/main/run-node/keyring"}},c={},l=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Interface type resolution",id:"interface-type-resolution",level:3},{value:"<code>BindInterface</code> API",id:"bindinterface-api",level:4},{value:"Full example in real app",id:"full-example-in-real-app",level:3},{value:"Debugging",id:"debugging",level:2}],d={toc:l};function s(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cosmos-sdk-dependency-injection-depinject-module"},"Cosmos SDK Dependency Injection ",(0,r.kt)("inlineCode",{parentName:"h1"},"depinject")," Module"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"depinject")," is a dependency injection framework for the Cosmos SDK. This module together with ",(0,r.kt)("inlineCode",{parentName:"p"},"core/appconfig")," are meant\nto simplify the definition of a blockchain by replacing most of app.go's boilerplate code with a configuration file (YAML or JSON)."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"depinject")," includes an expressive and composable ",(0,r.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/cosmos/cosmos-sdk/depinject#Config"},"Configuration API"),".\nA core configuration is ",(0,r.kt)("inlineCode",{parentName:"p"},"Provide"),", for example this code snippet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "cosmossdk.io/depinject"\n)\n\ntype AnotherInt int\n\nfunc main() {\n    var (\n      x int\n      y AnotherInt\n    )\n\n    fmt.Printf("Before (%v, %v)\\n", x, y)\n    depinject.Inject(\n        depinject.Provide(\n            func() int { return 1 },\n            func() AnotherInt { return AnotherInt(2) },\n        ),\n        &x,\n        &y,\n    )\n    fmt.Printf("After (%v, %v)\\n", x, y)\n}\n')),(0,r.kt)("p",null,"demonstrates the registration of free ",(0,r.kt)("strong",{parentName:"p"},"provider functions")," via the ",(0,r.kt)("inlineCode",{parentName:"p"},"Provide")," API.  Provider functions form the basis of the\ndependency tree, they are introspected then their inputs identified as dependencies and outputs as dependants, either for\nanother provider function or state stored outside the DI container, as is the case of ",(0,r.kt)("inlineCode",{parentName:"p"},"&x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"&y")," above."),(0,r.kt)("h3",{id:"interface-type-resolution"},"Interface type resolution"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"depinject")," supports interface types as inputs to provider functions.  In the SDK's case this pattern is used to decouple\n",(0,r.kt)("inlineCode",{parentName:"p"},"Keeper")," dependencies between modules.  For example ",(0,r.kt)("inlineCode",{parentName:"p"},"x/bank")," expects an ",(0,r.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/cosmos/cosmos-sdk/x/bank/types#AccountKeeper"},"AccountKeeper")," interface as ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/blob/de343d458aa68c19630177807d6f0e2e6deaf7a9/x/bank/module.go#L224"},"input to provideModule"),".\nConcretely ",(0,r.kt)("inlineCode",{parentName:"p"},"SimApp")," uses the implementation in ",(0,r.kt)("inlineCode",{parentName:"p"},"x/auth"),", but this design allows for this loose coupling to change."),(0,r.kt)("p",null,"Given the following types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"package duck\n\ntype Duck interface {\n    quack()\n}\n\ntype AlsoDuck interface {\n    quack()\n}\n\ntype Mallard struct{}\ntype Canvasback struct{}\n\nfunc (duck Mallard) quack()    {}\nfunc (duck Canvasback) quack() {}\n\ntype Pond struct {\n    Duck AlsoDuck\n}\n")),(0,r.kt)("p",null,"This usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"var pond Pond\n\ndepinject.Inject(\n  depinject.Provide(\n    func() Mallard { return Mallard{} },\n    func(duck Duck) Pond {\n      return Pond{Duck: duck}\n    }),\n   &pond)\n")),(0,r.kt)("p",null,"results in an ",(0,r.kt)("em",{parentName:"p"},"implicit")," binding of ",(0,r.kt)("inlineCode",{parentName:"p"},"Duck")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Mallard"),".  This works because there is only one implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"Duck"),"\nin the container.  However, adding a second provider of ",(0,r.kt)("inlineCode",{parentName:"p"},"Duck")," will result in an error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"var pond Pond\n\ndepinject.Inject(\n  depinject.Provide(\n    func() Mallard { return Mallard{} },\n    func() Canvasback { return Canvasback{} },\n    func(duck Duck) Pond {\n      return Pond{Duck: duck}\n    }),\n   &pond)\n")),(0,r.kt)("p",null,"A specific binding preference for ",(0,r.kt)("inlineCode",{parentName:"p"},"Duck")," is required."),(0,r.kt)("h4",{id:"bindinterface-api"},(0,r.kt)("inlineCode",{parentName:"h4"},"BindInterface")," API"),(0,r.kt)("p",null,"In the above situation registering a binding for a given interface binding may look like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'depinject.Inject(\n  depinject.Configs(\n    depinject.BindInterface(\n      "duck.Duck",\n      "duck.Mallard"),\n     depinject.Provide(\n       func() Mallard { return Mallard{} },\n       func() Canvasback { return Canvasback{} },\n       func(duck Duck) APond {\n         return Pond{Duck: duck}\n      })),\n   &pond)\n')),(0,r.kt)("p",null,"Now ",(0,r.kt)("inlineCode",{parentName:"p"},"depinject")," has enough information to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"Mallard")," as an input to ",(0,r.kt)("inlineCode",{parentName:"p"},"APond"),". "),(0,r.kt)("h3",{id:"full-example-in-real-app"},"Full example in real app"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"//go:embed app.yaml\nvar appConfigYaml []byte\n\nvar appConfig = appconfig.LoadYAML(appConfigYaml)\n\nfunc NewSimApp(\n    logger log.Logger,\n    db dbm.DB,\n    traceStore io.Writer,\n    loadLatest bool,\n    appOpts servertypes.AppOptions,\n    baseAppOptions ...func(*baseapp.BaseApp),\n) *SimApp {\n    var (\n        app        = &SimApp{}\n        appBuilder *runtime.AppBuilder\n    )\n\n    err := depinject.Inject(AppConfig,\n        &appBuilder,\n        &app.ParamsKeeper,\n        &app.CapabilityKeeper,\n        &app.appCodec,\n        &app.legacyAmino,\n        &app.interfaceRegistry,\n        &app.AccountKeeper,\n        &app.BankKeeper,\n        &app.FeeGrantKeeper,\n        &app.StakingKeeper,\n    )\n    if err != nil {\n        panic(err)\n    }\n...\n")),(0,r.kt)("h2",{id:"debugging"},"Debugging"),(0,r.kt)("p",null,"Issues with resolving dependencies in the container can be done with logs\nand ",(0,r.kt)("a",{parentName:"p",href:"https://graphviz.org"},"Graphviz")," renderings of the container tree. By default, whenever there is an error, logs will\nbe printed to stderr and a rendering of the dependency graph in Graphviz DOT format will be saved to\n",(0,r.kt)("inlineCode",{parentName:"p"},"debug_container.dot"),"."),(0,r.kt)("p",null,"Here is an example Graphviz rendering of a successful build of a dependency graph:\n",(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/cosmos/cosmos-sdk/ff39d243d421442b400befcd959ec3ccd2525154/depinject/testdata/example.svg",alt:"Graphviz Example"})),(0,r.kt)("p",null,"Rectangles represent functions, ovals represent types, rounded rectangles represent modules and the single hexagon\nrepresents the function which called ",(0,r.kt)("inlineCode",{parentName:"p"},"Build"),". Black-colored shapes mark functions and types that were called/resolved\nwithout an error. Gray-colored nodes mark functions and types that could have been called/resolved in the container but\nwere left unused."),(0,r.kt)("p",null,"Here is an example Graphviz rendering of a dependency graph build which failed:\n",(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/cosmos/cosmos-sdk/ff39d243d421442b400befcd959ec3ccd2525154/depinject/testdata/example_error.svg",alt:"Graphviz Error Example"})),(0,r.kt)("p",null,"Graphviz DOT files can be converted into SVG's for viewing in a web browser using the ",(0,r.kt)("inlineCode",{parentName:"p"},"dot")," command-line tool, ex:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"> dot -Tsvg debug_container.dot > debug_container.svg\n")),(0,r.kt)("p",null,"Many other tools including some IDEs support working with DOT files."))}s.isMDXComponent=!0}}]);